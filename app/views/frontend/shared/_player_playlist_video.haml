%video.video{controls: 'controls', poster: playlist.poster_url, width: width, height: height}
  - playlist.playlist.each do |event, recording|
    %source{type: recording.mime_type, src: h(recording.url), data: { lang: recording.language, quality: recording_quality(recording), id: event.id, mep: { description: event.description }, title: event.title, persons: event.persons.join(', ') }, title: event.title.truncate(30)}

:javascript
  $(function() {
    var promises = [];

    $('video source').each(function() {
      var $source = $(this);
      // Prop always presents the fully resolved URL
      promises.push(
        MirrorbrainFix.selectMirror($source.prop('src'), function(mirror) {
          $source.attr('src', mirror);
        })
      );
    });

    $.when.apply($, promises).done(function() {
      $('video').mediaelementplayer({
        usePluginFullScreen: true,
        enableAutosize: true,
        stretching: '#{stretching}',
        playlistposition: 'bottom',
        alwaysShowPlaylist: true,
        autoClosePlaylist: true,
        features: [
          'playlistfeature',
          'skipback', 'prevtrack', 'playpause', 'nexttrack', 'jumpforward', 'progress', 'current',
          'duration', 'tracks', 'volume', 'speed',
          'playlist',
          'fullscreen'
          ],
        skipBackInterval: 15,
        success: function (mediaElement) {
          mediaElement.addEventListener('canplay', function () {
            var ev = $('video source[src="' + mediaElement.src + '"');
            $('.description').html(ev.data('mepDescription'));
            $('span.event_title').html(ev.data('title'));
            $('p.persons').html(ev.data('persons'));
          }, false);
          mediaElement.addEventListener('playing', function () {
            var eventId = $('video source[src="' + mediaElement.src + '"').data('id');
            $.post("/public/recordings/count", {event_id: eventId, src: mediaElement.src});
          }, false);
        }
      });
    });
  })
